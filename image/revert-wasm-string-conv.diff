From 562e0b8071afedee7151936de26b073958fe4ee1 Mon Sep 17 00:00:00 2001
From: Fredrik Orderud <forderud@gmail.com>
Date: Wed, 5 Feb 2020 17:55:17 +0100
Subject: [PATCH] revert wasm: fix redundant string conversions between wasm
 and JavaScript

https://codereview.qt-project.org/c/qt/qtbase/+/286997
---
 mkspecs/wasm-emscripten/qmake.conf            |  1 -
 src/plugins/platforms/wasm/qwasmclipboard.cpp | 38 ++++++------
 src/plugins/platforms/wasm/qwasmcursor.cpp    |  7 +--
 .../platforms/wasm/qwasmeventtranslator.cpp   |  6 +-
 .../platforms/wasm/qwasmintegration.cpp       | 11 ++--
 src/plugins/platforms/wasm/qwasmscreen.cpp    |  4 +-
 src/plugins/platforms/wasm/qwasmservices.cpp  |  6 +-
 src/plugins/platforms/wasm/qwasmstring.cpp    | 61 -------------------
 src/plugins/platforms/wasm/qwasmstring.h      | 45 --------------
 src/plugins/platforms/wasm/wasm.pro           |  6 +-
 10 files changed, 34 insertions(+), 151 deletions(-)
 delete mode 100644 src/plugins/platforms/wasm/qwasmstring.cpp
 delete mode 100644 src/plugins/platforms/wasm/qwasmstring.h

diff --git a/mkspecs/wasm-emscripten/qmake.conf b/mkspecs/wasm-emscripten/qmake.conf
index f4e9501415..48c3fb7359 100644
--- a/mkspecs/wasm-emscripten/qmake.conf
+++ b/mkspecs/wasm-emscripten/qmake.conf
@@ -35,7 +35,6 @@ EMCC_COMMON_LFLAGS += \
     -s USE_WEBGL2=1 \
     -s NO_EXIT_RUNTIME=0 \
     -s ERROR_ON_UNDEFINED_SYMBOLS=1 \
-    -s EXTRA_EXPORTED_RUNTIME_METHODS=[\"UTF16ToString\",\"stringToUTF16\"] \
     --bind
 
 # The -s arguments can also be used with release builds,
diff --git a/src/plugins/platforms/wasm/qwasmclipboard.cpp b/src/plugins/platforms/wasm/qwasmclipboard.cpp
index f02c2c6ccb..fb46f1534f 100644
--- a/src/plugins/platforms/wasm/qwasmclipboard.cpp
+++ b/src/plugins/platforms/wasm/qwasmclipboard.cpp
@@ -29,7 +29,6 @@
 
 #include "qwasmclipboard.h"
 #include "qwasmwindow.h"
-#include "qwasmstring.h"
 
 #include <emscripten.h>
 #include <emscripten/html5.h>
@@ -41,22 +40,22 @@
 using namespace emscripten;
 
 // there has got to be a better way...
-static QString g_clipboardText;
-static QString g_clipboardFormat;
+static QByteArray g_clipboardArray;
+static QByteArray g_clipboardFormat;
 
 static val getClipboardData()
 {
-    return QWasmString::fromQString(g_clipboardText);
+    return val(g_clipboardArray.constData());
 }
 
 static val getClipboardFormat()
 {
-    return QWasmString::fromQString(g_clipboardFormat);
+    return val(g_clipboardFormat.constData());
 }
 
 static void pasteClipboardData(emscripten::val format, emscripten::val dataPtr)
 {
-    QString formatString = QWasmString::toQString(format);
+    QString formatString = QString::fromStdString(format.as<std::string>());
     QByteArray dataArray =  QByteArray::fromStdString(dataPtr.as<std::string>());
     QMimeData *mMimeData = new QMimeData;
     mMimeData->setData(formatString, dataArray);
@@ -103,10 +102,11 @@ static void qClipboardPasteTo(val event)
     bool hasClipboardApi = QWasmIntegration::get()->getWasmClipboard()->hasClipboardApi;
     val clipdata = hasClipboardApi ?
         val::global("Module").call<val>("qtGetClipboardData") :
-        event["clipboardData"].call<val>("getData", val("text"));
+        event["clipboardData"].call<val>("getData", std::string("text"));
 
-    const QString qstr = QWasmString::toQString(clipdata);
-    if (qstr.length() > 0) {
+    const std::string data = clipdata.as<std::string>();
+    if (data.length() > 0) {
+        QString qstr = QString::fromStdString(data);
         QMimeData *mMimeData = new QMimeData;
         mMimeData->setText(qstr);
         QWasmClipboard::qWasmClipboardPaste(mMimeData);
@@ -133,7 +133,7 @@ QWasmClipboard::QWasmClipboard()
 
 QWasmClipboard::~QWasmClipboard()
 {
-    g_clipboardText.clear();
+    g_clipboardArray.clear();
     g_clipboardFormat.clear();
 }
 
@@ -148,11 +148,11 @@ QMimeData* QWasmClipboard::mimeData(QClipboard::Mode mode)
 void QWasmClipboard::setMimeData(QMimeData* mimeData, QClipboard::Mode mode)
 {
     if (mimeData->hasText()) {
-        g_clipboardFormat = mimeData->formats().at(0);
-        g_clipboardText = mimeData->text();
+        g_clipboardFormat = mimeData->formats().at(0).toUtf8();
+        g_clipboardArray = mimeData->text().toUtf8();
     } else if (mimeData->hasHtml()) {
-        g_clipboardFormat = mimeData->formats().at(0);
-        g_clipboardText = mimeData->html();
+        g_clipboardFormat =mimeData->formats().at(0).toUtf8();
+        g_clipboardArray = mimeData->html().toUtf8();
     }
 
     QPlatformClipboard::setMimeData(mimeData, mode);
@@ -199,13 +199,13 @@ void QWasmClipboard::installEventHandlers(const QString &canvasId)
 
     // Fallback path for browsers which do not support direct clipboard access
     val document = val::global("document");
-    val canvas = document.call<val>("getElementById", QWasmString::fromQString(canvasId));
+    val canvas = document.call<val>("getElementById", val(canvasId.toUtf8().constData()));
 
-    canvas.call<void>("addEventListener", val("cut"),
+    canvas.call<void>("addEventListener", std::string("cut"),
                       val::module_property("qtClipboardCutTo"));
-    canvas.call<void>("addEventListener", val("copy"),
+    canvas.call<void>("addEventListener", std::string("copy"),
                       val::module_property("qtClipboardCopyTo"));
-    canvas.call<void>("addEventListener", val("paste"),
+    canvas.call<void>("addEventListener", std::string("paste"),
                       val::module_property("qtClipboardPasteTo"));
 }
 
@@ -226,6 +226,6 @@ void QWasmClipboard::writeTextToClipboard()
         val txt = module.call<val>("qtGetClipboardData");
         val format =  module.call<val>("qtGetClipboardFormat");
         val navigator = val::global("navigator");
-        navigator["clipboard"].call<void>("writeText", txt);
+        navigator["clipboard"].call<void>("writeText", txt.as<std::string>());
     }
 }
diff --git a/src/plugins/platforms/wasm/qwasmcursor.cpp b/src/plugins/platforms/wasm/qwasmcursor.cpp
index 616456b2fa..c04fa6441a 100644
--- a/src/plugins/platforms/wasm/qwasmcursor.cpp
+++ b/src/plugins/platforms/wasm/qwasmcursor.cpp
@@ -29,7 +29,6 @@
 
 #include "qwasmcursor.h"
 #include "qwasmscreen.h"
-#include "qwasmstring.h"
 
 #include <QtCore/qdebug.h>
 #include <QtGui/qwindow.h>
@@ -57,11 +56,11 @@ void QWasmCursor::changeCursor(QCursor *windowCursor, QWindow *window)
         htmlCursorName = "auto";
 
     // Set cursor on the canvas
-    val jsCanvasId = QWasmString::fromQString(QWasmScreen::get(screen)->canvasId());
+    QByteArray canvasId = QWasmScreen::get(screen)->canvasId().toUtf8();
     val document = val::global("document");
-    val canvas = document.call<val>("getElementById", jsCanvasId);
+    val canvas = document.call<val>("getElementById", val(canvasId.constData()));
     val canvasStyle = canvas["style"];
-    canvasStyle.set("cursor", val(htmlCursorName.constData()));
+    canvasStyle.set("cursor", emscripten::val(htmlCursorName.constData()));
 }
 
 QByteArray QWasmCursor::cursorShapeToHtml(Qt::CursorShape shape)
diff --git a/src/plugins/platforms/wasm/qwasmeventtranslator.cpp b/src/plugins/platforms/wasm/qwasmeventtranslator.cpp
index 1ccac87afa..8b7d00082f 100644
--- a/src/plugins/platforms/wasm/qwasmeventtranslator.cpp
+++ b/src/plugins/platforms/wasm/qwasmeventtranslator.cpp
@@ -32,7 +32,6 @@
 #include "qwasmcompositor.h"
 #include "qwasmintegration.h"
 #include "qwasmclipboard.h"
-#include "qwasmstring.h"
 
 #include <QtGui/qevent.h>
 #include <qpa/qwindowsysteminterface.h>
@@ -356,10 +355,9 @@ void QWasmEventTranslator::initEventHandlers()
 
         if (emscripten::val::global("window")["safari"].isUndefined()) {
             val document = val::global("document");
-            val jsCanvasId = QWasmString::fromQString(screen()->canvasId());
-            val canvas = document.call<val>("getElementById", jsCanvasId);
+            val canvas = document.call<val>("getElementById", val(canvasId));
             canvas.call<void>("addEventListener",
-                              val("wheel"),
+                              std::string("wheel"),
                               val::module_property("qtMouseWheelEvent"));
         }
     }
diff --git a/src/plugins/platforms/wasm/qwasmintegration.cpp b/src/plugins/platforms/wasm/qwasmintegration.cpp
index fd53cd0bae..1e9f68027c 100644
--- a/src/plugins/platforms/wasm/qwasmintegration.cpp
+++ b/src/plugins/platforms/wasm/qwasmintegration.cpp
@@ -36,7 +36,6 @@
 #include "qwasmclipboard.h"
 #include "qwasmservices.h"
 #include "qwasmoffscreensurface.h"
-#include "qwasmstring.h"
 
 #include "qwasmwindow.h"
 #ifndef QT_NO_OPENGL
@@ -68,19 +67,19 @@ static void browserBeforeUnload(emscripten::val)
 
 static void addCanvasElement(emscripten::val canvas)
 {
-    QString canvasId = QWasmString::toQString(canvas["id"]);
+    QString canvasId = QString::fromStdString(canvas["id"].as<std::string>());
     QWasmIntegration::get()->addScreen(canvasId);
 }
 
 static void removeCanvasElement(emscripten::val canvas)
 {
-    QString canvasId = QWasmString::toQString(canvas["id"]);
+    QString canvasId = QString::fromStdString(canvas["id"].as<std::string>());
     QWasmIntegration::get()->removeScreen(canvasId);
 }
 
 static void resizeCanvasElement(emscripten::val canvas)
 {
-    QString canvasId = QWasmString::toQString(canvas["id"]);
+    QString canvasId = QString::fromStdString(canvas["id"].as<std::string>());
     QWasmIntegration::get()->resizeScreen(canvasId);
 }
 
@@ -116,11 +115,11 @@ QWasmIntegration::QWasmIntegration()
         int screenCount = qtCanvaseElements["length"].as<int>();
         for (int i = 0; i < screenCount; ++i) {
             emscripten::val canvas = qtCanvaseElements[i].as<emscripten::val>();
-            QString canvasId = QWasmString::toQString(canvas["id"]);
+            QString canvasId = QString::fromStdString(canvas["id"].as<std::string>());
             addScreen(canvasId);
         }
     } else if (!canvas.isUndefined()){
-        QString canvasId = QWasmString::toQString(canvas["id"]);
+        QString canvasId = QString::fromStdString(canvas["id"].as<std::string>());
         addScreen(canvasId);
     }
 
diff --git a/src/plugins/platforms/wasm/qwasmscreen.cpp b/src/plugins/platforms/wasm/qwasmscreen.cpp
index d407111c2f..fe44fdb096 100644
--- a/src/plugins/platforms/wasm/qwasmscreen.cpp
+++ b/src/plugins/platforms/wasm/qwasmscreen.cpp
@@ -32,8 +32,6 @@
 #include "qwasmeventtranslator.h"
 #include "qwasmcompositor.h"
 #include "qwasmintegration.h"
-#include "qwasmstring.h"
-
 #include <emscripten/bind.h>
 #include <emscripten/val.h>
 
@@ -186,7 +184,7 @@ void QWasmScreen::updateQScreenAndCanvasRenderSize()
 
     QSizeF canvasSize = cssSize * devicePixelRatio();
     val document = val::global("document");
-    val canvas = document.call<val>("getElementById", QWasmString::fromQString(m_canvasId));
+    val canvas = document.call<val>("getElementById", val(canvasId.constData()));
 
     canvas.set("width", canvasSize.width());
     canvas.set("height", canvasSize.height());
diff --git a/src/plugins/platforms/wasm/qwasmservices.cpp b/src/plugins/platforms/wasm/qwasmservices.cpp
index 4eee3fe972..9328b8c065 100644
--- a/src/plugins/platforms/wasm/qwasmservices.cpp
+++ b/src/plugins/platforms/wasm/qwasmservices.cpp
@@ -28,8 +28,6 @@
 ****************************************************************************/
 
 #include "qwasmservices.h"
-#include "qwasmstring.h"
-
 #include <QtCore/QUrl>
 #include <QtCore/QDebug>
 
@@ -39,8 +37,8 @@ QT_BEGIN_NAMESPACE
 
 bool QWasmServices::openUrl(const QUrl &url)
 {
-    emscripten::val jsUrl = QWasmString::fromQString(url.toString());
-    emscripten::val::global("window").call<void>("open", jsUrl, emscripten::val("_blank"));
+    QByteArray utf8Url = url.toString().toUtf8();
+    emscripten::val::global("window").call<void>("open", emscripten::val(utf8Url.constData()), emscripten::val("_blank"));
     return true;
 }
 
diff --git a/src/plugins/platforms/wasm/qwasmstring.cpp b/src/plugins/platforms/wasm/qwasmstring.cpp
deleted file mode 100644
index 05b571c459..0000000000
--- a/src/plugins/platforms/wasm/qwasmstring.cpp
+++ /dev/null
@@ -1,61 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2020 The Qt Company Ltd.
-** Contact: https://www.qt.io/licensing/
-**
-** This file is part of the plugins of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:GPL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and The Qt Company. For licensing terms
-** and conditions see https://www.qt.io/terms-conditions. For further
-** information use the contact form at https://www.qt.io/contact-us.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3 or (at your option) any later version
-** approved by the KDE Free Qt Foundation. The licenses are as published by
-** the Free Software Foundation and appearing in the file LICENSE.GPL3
-** included in the packaging of this file. Please review the following
-** information to ensure the GNU General Public License requirements will
-** be met: https://www.gnu.org/licenses/gpl-3.0.html.
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#include "qwasmstring.h"
-
-QT_BEGIN_NAMESPACE
-
-using namespace emscripten;
-
-val QWasmString::fromQString(const QString &str)
-{
-    static const val UTF16ToString(
-        val::global("Module")["UTF16ToString"]);
-
-    auto ptr = quintptr(str.utf16());
-    return UTF16ToString(val(ptr));
-}
-
-QString QWasmString::toQString(const val &v)
-{
-    QString result;
-    if (!v.isString())
-        return result;
-
-    static const val stringToUTF16(
-        val::global("Module")["stringToUTF16"]);
-    static const val length("length");
-
-    result.resize(v[length].as<int>());
-    auto ptr = quintptr(result.utf16());
-    stringToUTF16(v, val(ptr));
-    return result;
-}
-
-QT_END_NAMESPACE
diff --git a/src/plugins/platforms/wasm/qwasmstring.h b/src/plugins/platforms/wasm/qwasmstring.h
deleted file mode 100644
index de5da92830..0000000000
--- a/src/plugins/platforms/wasm/qwasmstring.h
+++ /dev/null
@@ -1,45 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2020 The Qt Company Ltd.
-** Contact: https://www.qt.io/licensing/
-**
-** This file is part of the plugins of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:GPL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and The Qt Company. For licensing terms
-** and conditions see https://www.qt.io/terms-conditions. For further
-** information use the contact form at https://www.qt.io/contact-us.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3 or (at your option) any later version
-** approved by the KDE Free Qt Foundation. The licenses are as published by
-** the Free Software Foundation and appearing in the file LICENSE.GPL3
-** included in the packaging of this file. Please review the following
-** information to ensure the GNU General Public License requirements will
-** be met: https://www.gnu.org/licenses/gpl-3.0.html.
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#pragma once
-
-#include <qstring.h>
-
-#include <emscripten/val.h>
-
-QT_BEGIN_NAMESPACE
-
-class QWasmString
-{
-public:
-    static emscripten::val fromQString(const QString &str);
-    static QString toQString(const emscripten::val &v);
-};
-QT_END_NAMESPACE
-
diff --git a/src/plugins/platforms/wasm/wasm.pro b/src/plugins/platforms/wasm/wasm.pro
index a12ae06833..f8c8175525 100644
--- a/src/plugins/platforms/wasm/wasm.pro
+++ b/src/plugins/platforms/wasm/wasm.pro
@@ -23,8 +23,7 @@ SOURCES = \
     qwasmtheme.cpp \
     qwasmclipboard.cpp \
     qwasmservices.cpp \
-    qwasmoffscreensurface.cpp \
-    qwasmstring.cpp
+    qwasmoffscreensurface.cpp
 
 HEADERS = \
     qwasmintegration.h \
@@ -40,8 +39,7 @@ HEADERS = \
     qwasmtheme.h \
     qwasmclipboard.h \
     qwasmservices.h \
-    qwasmoffscreensurface.h \
-    qwasmstring.h
+    qwasmoffscreensurface.h
 
 wasmfonts.files = \
     ../../../3rdparty/wasm/Vera.ttf \
-- 
2.22.0.windows.1

